//------------------------------------------------------------------------------
// CacheProvider version: 2014.2.0.372
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shopping {
    
    
    /// <summary>
    /// Контактна інформація
    /// </summary>
    public partial class ContactInfo : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Shopping.ContactInfo";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 51887;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(35);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static ContactInfo() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Shopping.ContactInfo", typeof(ContactInfo));
            ;
            Shopping.ContactInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Address", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfDT, 45590));
            Shopping.ContactInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Email", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfDT, 54996));
            Shopping.ContactInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Phones", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfDT, 54996));
            Shopping.ContactInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("www", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Shopping.ContactInfo.CheckSumMethodDict.Add("%ClassName", 4853);
            Shopping.ContactInfo.CheckSumMethodDict.Add("%Delete", 286);
            Shopping.ContactInfo.CheckSumMethodDict.Add("%DeleteId", 61438);
            Shopping.ContactInfo.CheckSumMethodDict.Add("%IsA", 40977);
            Shopping.ContactInfo.CheckSumMethodDict.Add("%ObjectIsNull", 52396);
            Shopping.ContactInfo.CheckSumMethodDict.Add("%Open", 29934);
            Shopping.ContactInfo.CheckSumMethodDict.Add("%OpenId", 6240);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressDisplayToLogical", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressGetObject", 44394);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressGetObjectId", 4555);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressIsValid", 4756);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressLogicalToDisplay", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressSetObject", 15000);
            Shopping.ContactInfo.CheckSumMethodDict.Add("AddressSetObjectId", 27957);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailDisplayToLogical", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailGetObject", 44394);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailGetObjectId", 4555);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailIsValid", 4756);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailLogicalToDisplay", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailSetObject", 15000);
            Shopping.ContactInfo.CheckSumMethodDict.Add("EmailSetObjectId", 27957);
            Shopping.ContactInfo.CheckSumMethodDict.Add("LogicalToOdbc", 11314);
            Shopping.ContactInfo.CheckSumMethodDict.Add("OdbcToLogical", 11314);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesDisplayToLogical", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesGetObject", 44394);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesGetObjectId", 4555);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesIsValid", 4756);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesLogicalToDisplay", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesSetObject", 15000);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PhonesSetObjectId", 27957);
            Shopping.ContactInfo.CheckSumMethodDict.Add("Populate", 60597);
            Shopping.ContactInfo.CheckSumMethodDict.Add("PopulateSerial", 28057);
            Shopping.ContactInfo.CheckSumMethodDict.Add("wwwDisplayToLogical", 59650);
            Shopping.ContactInfo.CheckSumMethodDict.Add("wwwIsValid", 4756);
            Shopping.ContactInfo.CheckSumMethodDict.Add("wwwLogicalToDisplay", 59650);
            ;
        }
        
        /// <summary>Internal API</summary>
        public ContactInfo() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public ContactInfo(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Shopping.ContactInfo.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public ContactInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Shopping.ContactInfo.ServerClassName);
        }
        
        /// <summary>
        /// фізична адреса
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfStrings Address {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfDT, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Address", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfStrings)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Address", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// e-mail контактного центру
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheArrayOfStrings Email {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfDT, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Email", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheArrayOfStrings)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Email", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Контактні телефони
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheArrayOfStrings Phones {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfDT, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Phones", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheArrayOfStrings)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Phones", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// інтернет адреса
        /// </summary>
        public virtual string www {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("www", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("www", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ClassName
        /// </summary>
        public static string SysClassName(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<bool> fullname) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(fullname, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%ClassName", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Delete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDelete(InterSystems.Data.CacheClient.CacheConnection conn, byte[] oid, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(oid, false);
                    mtdSignature.Add(concurrency, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%Delete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteId
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(id, false);
                    mtdSignature.Add(concurrency, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%DeleteId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Open
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpen(InterSystems.Data.CacheClient.CacheConnection conn, byte[] initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%Open", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %OpenId
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpenId(InterSystems.Data.CacheClient.CacheConnection conn, string initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "%OpenId", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AddressDisplayToLogical
        /// </summary>
        public static string AddressDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "AddressDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AddressGetObject
        /// </summary>
        public virtual byte[] AddressGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("AddressGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method AddressGetObjectId
        /// </summary>
        public virtual string AddressGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("AddressGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method AddressIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus AddressIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "AddressIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AddressLogicalToDisplay
        /// </summary>
        public static string AddressLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "AddressLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AddressSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus AddressSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("AddressSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method AddressSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus AddressSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("AddressSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method EmailDisplayToLogical
        /// </summary>
        public static string EmailDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "EmailDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EmailGetObject
        /// </summary>
        public virtual byte[] EmailGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("EmailGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method EmailGetObjectId
        /// </summary>
        public virtual string EmailGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("EmailGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method EmailIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus EmailIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "EmailIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EmailLogicalToDisplay
        /// </summary>
        public static string EmailLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "EmailLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EmailSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus EmailSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("EmailSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method EmailSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus EmailSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("EmailSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method LogicalToOdbc
        /// </summary>
        public static string LogicalToOdbc(InterSystems.Data.CacheClient.CacheConnection conn, string val) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(val, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "LogicalToOdbc", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method OdbcToLogical
        /// </summary>
        public static string OdbcToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string val) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(val, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "OdbcToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesDisplayToLogical
        /// </summary>
        public static string PhonesDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "PhonesDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesGetObject
        /// </summary>
        public virtual byte[] PhonesGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("PhonesGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesGetObjectId
        /// </summary>
        public virtual string PhonesGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("PhonesGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus PhonesIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "PhonesIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesLogicalToDisplay
        /// </summary>
        public static string PhonesLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "PhonesLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus PhonesSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("PhonesSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method PhonesSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus PhonesSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("PhonesSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method Populate
        /// </summary>
        public static System.Nullable<long> Populate(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> count, System.Nullable<long> verbose, System.Nullable<long> DeferIndices, ref System.Nullable<long> objects, System.Nullable<long> tune) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(count, false);
                    mtdSignature.Add(verbose, false);
                    mtdSignature.Add(DeferIndices, false);
                    mtdSignature.Add(objects, true);
                    mtdSignature.Add(tune, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "Populate", mtdSignature);
                    objects = ((InterSystems.Data.CacheTypes.CacheIntArgument)(mtdSignature.Arguments[3])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PopulateSerial
        /// </summary>
        public static string PopulateSerial(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "PopulateSerial", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method wwwDisplayToLogical
        /// </summary>
        public static string wwwDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "wwwDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method wwwIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus wwwIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "wwwIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method wwwLogicalToDisplay
        /// </summary>
        public static string wwwLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.ContactInfo.RunClassMethodS(conn, Shopping.ContactInfo.ServerClassName, "wwwLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Shopping.ContactInfo.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Shopping.ContactInfo.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Shopping.ContactInfo.ServerClassName);
            if (metaInfo.Validate(Shopping.ContactInfo.ClassCheckSum, Shopping.ContactInfo.PropertyInfoColn, Shopping.ContactInfo.CheckSumMethodDict, Shopping.ContactInfo.CheckSumQueryDict, Shopping.ContactInfo.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Shopping.ContactInfo.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Shopping.ContactInfo.AllPropertiesInfoColn != null)) {
                return Shopping.ContactInfo.AllPropertiesInfoColn;
            }
            Shopping.ContactInfo.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Shopping.ContactInfo.PropertyInfoColn);
            return Shopping.ContactInfo.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Shopping.ContactInfo.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Shopping {
    
    
    /// <summary>
    /// товар
    /// </summary>
    public partial class Goods : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Shopping.Goods";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(28);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(5);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Goods() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Shopping.Goods", typeof(Goods));
            ;
            Shopping.Goods.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Cost", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 42612));
            Shopping.Goods.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Shopping.Goods.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Price", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 23157));
            Shopping.Goods.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Quantity", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Shopping.Goods.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ShoppingTrip", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 31812));
            ;
            Shopping.Goods.CheckSumMethodDict.Add("%ComposeOid", 25785);
            Shopping.Goods.CheckSumMethodDict.Add("%DeleteExtent", 56782);
            Shopping.Goods.CheckSumMethodDict.Add("%IsA", 40977);
            Shopping.Goods.CheckSumMethodDict.Add("%ObjectIsNull", 52396);
            Shopping.Goods.CheckSumMethodDict.Add("%SaveIndices", 30436);
            Shopping.Goods.CheckSumMethodDict.Add("CalcCost", 16839);
            Shopping.Goods.CheckSumMethodDict.Add("CostDisplayToLogical", 51611);
            Shopping.Goods.CheckSumMethodDict.Add("CostIsValid", 4756);
            Shopping.Goods.CheckSumMethodDict.Add("CostLogicalToDisplay", 6601);
            Shopping.Goods.CheckSumMethodDict.Add("IDKEYDelete", 23949);
            Shopping.Goods.CheckSumMethodDict.Add("IDKEYExists", 33997);
            Shopping.Goods.CheckSumMethodDict.Add("IDKEYOpen", 19915);
            Shopping.Goods.CheckSumMethodDict.Add("NameDisplayToLogical", 59650);
            Shopping.Goods.CheckSumMethodDict.Add("NameIsValid", 4756);
            Shopping.Goods.CheckSumMethodDict.Add("NameLogicalToDisplay", 59650);
            Shopping.Goods.CheckSumMethodDict.Add("Populate", 60597);
            Shopping.Goods.CheckSumMethodDict.Add("PopulateSerial", 28057);
            Shopping.Goods.CheckSumMethodDict.Add("PriceDisplayToLogical", 51611);
            Shopping.Goods.CheckSumMethodDict.Add("PriceIsValid", 4756);
            Shopping.Goods.CheckSumMethodDict.Add("PriceLogicalToDisplay", 6601);
            Shopping.Goods.CheckSumMethodDict.Add("QuantityDisplayToLogical", 20538);
            Shopping.Goods.CheckSumMethodDict.Add("QuantityIsValid", 4756);
            Shopping.Goods.CheckSumMethodDict.Add("QuantityLogicalToDisplay", 26184);
            Shopping.Goods.CheckSumMethodDict.Add("ShoppingTripGetObject", 44394);
            Shopping.Goods.CheckSumMethodDict.Add("ShoppingTripGetObjectId", 4555);
            Shopping.Goods.CheckSumMethodDict.Add("ShoppingTripIsValid", 30030);
            Shopping.Goods.CheckSumMethodDict.Add("ShoppingTripSetObject", 15000);
            Shopping.Goods.CheckSumMethodDict.Add("ShoppingTripSetObjectId", 27957);
            ;
            Shopping.Goods.CheckSumQueryDict.Add("Extent", 1144);
        }
        
        /// <summary>Internal API</summary>
        public Goods() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Goods(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Shopping.Goods.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Goods(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Shopping.Goods.ServerClassName);
        }
        
        /// <summary>
        /// загальна вартість
        /// </summary>
        public virtual System.Nullable<double> Cost {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Cost", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// назва товару
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// вартість одиниці товару
        /// </summary>
        public virtual System.Nullable<double> Price {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Price", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Price", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// кількість товару
        /// </summary>
        public virtual System.Nullable<long> Quantity {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Quantity", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Quantity", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property ShoppingTrip
        /// </summary>
        public virtual Shopping.Record ShoppingTrip {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Shopping.Record));
                        this.GetPropertyS("ShoppingTrip", mtdSignature);
                        return ((Shopping.Record)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("ShoppingTrip", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CalcCost
        /// </summary>
        public static System.Nullable<double> CalcCost(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> price, System.Nullable<long> qty) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                    mtdSignature.Add(price, false);
                    mtdSignature.Add(qty, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "CalcCost", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CostDisplayToLogical
        /// </summary>
        public static System.Nullable<double> CostDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "CostDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CostIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CostIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "CostIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CostLogicalToDisplay
        /// </summary>
        public static string CostLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "CostLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, string K2, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(K2, false);
                    mtdSignature.Add(concurrency, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, string K2, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(K2, false);
                    mtdSignature.Add(id, true);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static Shopping.Goods IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, string K2, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Shopping.Goods));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(K2, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[3])).Value;
                    return ((Shopping.Goods)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameDisplayToLogical
        /// </summary>
        public static string NameDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "NameDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus NameIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "NameIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameLogicalToDisplay
        /// </summary>
        public static string NameLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "NameLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Populate
        /// </summary>
        public static System.Nullable<long> Populate(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> count, System.Nullable<long> verbose, System.Nullable<long> DeferIndices, ref System.Nullable<long> objects, System.Nullable<long> tune) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(count, false);
                    mtdSignature.Add(verbose, false);
                    mtdSignature.Add(DeferIndices, false);
                    mtdSignature.Add(objects, true);
                    mtdSignature.Add(tune, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "Populate", mtdSignature);
                    objects = ((InterSystems.Data.CacheTypes.CacheIntArgument)(mtdSignature.Arguments[3])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PopulateSerial
        /// </summary>
        public static string PopulateSerial(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "PopulateSerial", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PriceDisplayToLogical
        /// </summary>
        public static System.Nullable<double> PriceDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "PriceDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PriceIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus PriceIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "PriceIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PriceLogicalToDisplay
        /// </summary>
        public static string PriceLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "PriceLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method QuantityDisplayToLogical
        /// </summary>
        public static System.Nullable<long> QuantityDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "QuantityDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method QuantityIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus QuantityIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "QuantityIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method QuantityLogicalToDisplay
        /// </summary>
        public static string QuantityLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "QuantityLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ShoppingTripGetObject
        /// </summary>
        public virtual byte[] ShoppingTripGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ShoppingTripGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ShoppingTripGetObjectId
        /// </summary>
        public virtual string ShoppingTripGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ShoppingTripGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ShoppingTripIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ShoppingTripIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    Shopping.Goods.RunClassMethodS(conn, Shopping.Goods.ServerClassName, "ShoppingTripIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ShoppingTripSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ShoppingTripSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("ShoppingTripSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ShoppingTripSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ShoppingTripSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("ShoppingTripSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Shopping.Goods_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, typeof(Shopping.Goods), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, typeof(Shopping.Goods), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, typeof(Shopping.Goods))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, timeout, typeof(Shopping.Goods), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, typeof(Shopping.Goods), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, timeout, typeof(Shopping.Goods), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Goods Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, typeof(Shopping.Goods), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, typeof(Shopping.Goods), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, typeof(Shopping.Goods), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, typeof(Shopping.Goods))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, timeout, typeof(Shopping.Goods), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, typeof(Shopping.Goods), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, concurrency, timeout, typeof(Shopping.Goods), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Goods OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Goods)(conn.OpenProxyObj(Shopping.Goods.ServerClassName, id, typeof(Shopping.Goods), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Shopping.Goods.ExistsIdInternal(conn, Shopping.Goods.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Shopping.Goods.DeleteIdInternal(conn, Shopping.Goods.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Shopping.Goods.KillExtentInternal(conn, Shopping.Goods.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Shopping.Goods.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Shopping.Goods.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Shopping.Goods.ServerClassName);
            if (metaInfo.Validate(Shopping.Goods.ClassCheckSum, Shopping.Goods.PropertyInfoColn, Shopping.Goods.CheckSumMethodDict, Shopping.Goods.CheckSumQueryDict, Shopping.Goods.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Shopping.Goods.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Shopping.Goods.AllPropertiesInfoColn != null)) {
                return Shopping.Goods.AllPropertiesInfoColn;
            }
            Shopping.Goods.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Shopping.Goods.PropertyInfoColn);
            return Shopping.Goods.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Shopping.Goods.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Shopping {
    
    
    /// <summary>
    /// опис завдання на один похід в магазин
    /// </summary>
    public partial class Record : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Shopping.Record";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(21);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(3);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Record() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Shopping.Record", typeof(Record));
            ;
            Shopping.Record.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Date", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 49942));
            Shopping.Record.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Goods", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tRelationship, 33084));
            Shopping.Record.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Shop", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 10281));
            ;
            Shopping.Record.CheckSumMethodDict.Add("%ComposeOid", 25785);
            Shopping.Record.CheckSumMethodDict.Add("%DeleteExtent", 56782);
            Shopping.Record.CheckSumMethodDict.Add("%IsA", 40977);
            Shopping.Record.CheckSumMethodDict.Add("%ObjectIsNull", 52396);
            Shopping.Record.CheckSumMethodDict.Add("%SaveIndices", 30436);
            Shopping.Record.CheckSumMethodDict.Add("DateDisplayToLogical", 15751);
            Shopping.Record.CheckSumMethodDict.Add("DateIsValid", 4756);
            Shopping.Record.CheckSumMethodDict.Add("DateLogicalToDisplay", 21196);
            Shopping.Record.CheckSumMethodDict.Add("GoodsGetObject", 44394);
            Shopping.Record.CheckSumMethodDict.Add("GoodsGetObjectId", 4555);
            Shopping.Record.CheckSumMethodDict.Add("GoodsIsValid", 30030);
            Shopping.Record.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            Shopping.Record.CheckSumMethodDict.Add("IDKEYExists", 13237);
            Shopping.Record.CheckSumMethodDict.Add("IDKEYOpen", 2333);
            Shopping.Record.CheckSumMethodDict.Add("Populate", 60597);
            Shopping.Record.CheckSumMethodDict.Add("PopulateSerial", 28057);
            Shopping.Record.CheckSumMethodDict.Add("ShopGetObject", 44394);
            Shopping.Record.CheckSumMethodDict.Add("ShopGetObjectId", 4555);
            Shopping.Record.CheckSumMethodDict.Add("ShopIsValid", 30030);
            Shopping.Record.CheckSumMethodDict.Add("ShopSetObject", 15000);
            Shopping.Record.CheckSumMethodDict.Add("ShopSetObjectId", 27957);
            ;
            Shopping.Record.CheckSumQueryDict.Add("Extent", 46538);
            Shopping.Record.CheckSumQueryDict.Add("GetShoppingRecords", 35625);
        }
        
        /// <summary>Internal API</summary>
        public Record() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Record(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Shopping.Record.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Record(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Shopping.Record.ServerClassName);
        }
        
        /// <summary>
        /// дата здійснення походу
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate Date {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("Date", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("Date", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Товари, які необхідно купити
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheRelationshipObject Goods {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheRelationshipObject));
                        this.GetPropertyS("Goods", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheRelationshipObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Goods", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// магазин, в якому будуть робитися покупки
        /// </summary>
        public virtual Shopping.Shop Shop {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Shopping.Shop));
                        this.GetPropertyS("Shop", mtdSignature);
                        return ((Shopping.Shop)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Shop", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DateDisplayToLogical
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheDate DateDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "DateDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DateIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DateIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "DateIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DateLogicalToDisplay
        /// </summary>
        public static string DateLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "DateLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GoodsGetObject
        /// </summary>
        public virtual byte[] GoodsGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("GoodsGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method GoodsGetObjectId
        /// </summary>
        public virtual string GoodsGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("GoodsGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method GoodsIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GoodsIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "GoodsIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static Shopping.Record IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Shopping.Record));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Shopping.Record)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Populate
        /// </summary>
        public static System.Nullable<long> Populate(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> count, System.Nullable<long> verbose, System.Nullable<long> DeferIndices, ref System.Nullable<long> objects, System.Nullable<long> tune) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(count, false);
                    mtdSignature.Add(verbose, false);
                    mtdSignature.Add(DeferIndices, false);
                    mtdSignature.Add(objects, true);
                    mtdSignature.Add(tune, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "Populate", mtdSignature);
                    objects = ((InterSystems.Data.CacheTypes.CacheIntArgument)(mtdSignature.Arguments[3])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PopulateSerial
        /// </summary>
        public static string PopulateSerial(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "PopulateSerial", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ShopGetObject
        /// </summary>
        public virtual byte[] ShopGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ShopGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ShopGetObjectId
        /// </summary>
        public virtual string ShopGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ShopGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ShopIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ShopIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    Shopping.Record.RunClassMethodS(conn, Shopping.Record.ServerClassName, "ShopIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ShopSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ShopSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("ShopSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ShopSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ShopSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("ShopSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Shopping.Record_Extent}", conn);
            return cmd;
        }
        
        /// <summary>
        /// повернення усіх походів до магазину
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand GetShoppingRecords(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Shopping.Record_GetShoppingRecords}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, typeof(Shopping.Record), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, typeof(Shopping.Record), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, typeof(Shopping.Record))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, timeout, typeof(Shopping.Record), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, typeof(Shopping.Record), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, timeout, typeof(Shopping.Record), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Record Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, typeof(Shopping.Record), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, typeof(Shopping.Record), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, typeof(Shopping.Record), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, typeof(Shopping.Record))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, timeout, typeof(Shopping.Record), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, typeof(Shopping.Record), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, concurrency, timeout, typeof(Shopping.Record), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Record OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Record)(conn.OpenProxyObj(Shopping.Record.ServerClassName, id, typeof(Shopping.Record), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Shopping.Record.ExistsIdInternal(conn, Shopping.Record.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Shopping.Record.DeleteIdInternal(conn, Shopping.Record.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Shopping.Record.KillExtentInternal(conn, Shopping.Record.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Shopping.Record.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Shopping.Record.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Shopping.Record.ServerClassName);
            if (metaInfo.Validate(Shopping.Record.ClassCheckSum, Shopping.Record.PropertyInfoColn, Shopping.Record.CheckSumMethodDict, Shopping.Record.CheckSumQueryDict, Shopping.Record.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Shopping.Record.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Shopping.Record.AllPropertiesInfoColn != null)) {
                return Shopping.Record.AllPropertiesInfoColn;
            }
            Shopping.Record.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Shopping.Record.PropertyInfoColn);
            return Shopping.Record.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Shopping.Record.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Shopping {
    
    
    /// <summary>
    /// магазин у якому робляться покупки
    /// </summary>
    public partial class Shop : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Shopping.Shop";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(24);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(3);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Shop() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Shopping.Shop", typeof(Shop));
            ;
            Shopping.Shop.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Contacts", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 26726));
            Shopping.Shop.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Shopping.Shop.CheckSumMethodDict.Add("%ComposeOid", 25785);
            Shopping.Shop.CheckSumMethodDict.Add("%DeleteExtent", 56782);
            Shopping.Shop.CheckSumMethodDict.Add("%IsA", 40977);
            Shopping.Shop.CheckSumMethodDict.Add("%ObjectIsNull", 52396);
            Shopping.Shop.CheckSumMethodDict.Add("%SaveIndices", 30436);
            Shopping.Shop.CheckSumMethodDict.Add("ContactsGetObject", 44394);
            Shopping.Shop.CheckSumMethodDict.Add("ContactsGetObjectId", 4555);
            Shopping.Shop.CheckSumMethodDict.Add("ContactsIsValid", 30030);
            Shopping.Shop.CheckSumMethodDict.Add("ContactsSetObject", 15000);
            Shopping.Shop.CheckSumMethodDict.Add("ContactsSetObjectId", 27957);
            Shopping.Shop.CheckSumMethodDict.Add("GetAllEmailsClose", 54386);
            Shopping.Shop.CheckSumMethodDict.Add("GetAllEmailsExecute", 245);
            Shopping.Shop.CheckSumMethodDict.Add("GetAllEmailsFetch", 46402);
            Shopping.Shop.CheckSumMethodDict.Add("GetShopAddressesClose", 54386);
            Shopping.Shop.CheckSumMethodDict.Add("GetShopAddressesExecute", 245);
            Shopping.Shop.CheckSumMethodDict.Add("GetShopAddressesFetch", 46402);
            Shopping.Shop.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            Shopping.Shop.CheckSumMethodDict.Add("IDKEYExists", 13237);
            Shopping.Shop.CheckSumMethodDict.Add("IDKEYOpen", 5205);
            Shopping.Shop.CheckSumMethodDict.Add("NameDisplayToLogical", 59650);
            Shopping.Shop.CheckSumMethodDict.Add("NameIsValid", 4756);
            Shopping.Shop.CheckSumMethodDict.Add("NameLogicalToDisplay", 59650);
            Shopping.Shop.CheckSumMethodDict.Add("Populate", 60597);
            Shopping.Shop.CheckSumMethodDict.Add("PopulateSerial", 28057);
            ;
            Shopping.Shop.CheckSumQueryDict.Add("Extent", 45368);
            Shopping.Shop.CheckSumQueryDict.Add("GetAllEmails", 11872);
            Shopping.Shop.CheckSumQueryDict.Add("GetShopAddresses", 19489);
        }
        
        /// <summary>Internal API</summary>
        public Shop() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Shop(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Shopping.Shop.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Shop(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Shopping.Shop.ServerClassName);
        }
        
        /// <summary>
        /// контактна інформація магазину
        /// </summary>
        public virtual Shopping.ContactInfo Contacts {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Shopping.ContactInfo));
                        this.GetPropertyS("Contacts", mtdSignature);
                        return ((Shopping.ContactInfo)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Contacts", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// назва магазину
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ContactsGetObject
        /// </summary>
        public virtual byte[] ContactsGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ContactsGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ContactsGetObjectId
        /// </summary>
        public virtual string ContactsGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ContactsGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ContactsIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ContactsIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "ContactsIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ContactsSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ContactsSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("ContactsSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ContactsSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ContactsSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("ContactsSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method GetAllEmailsClose
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GetAllEmailsClose(InterSystems.Data.CacheClient.CacheConnection conn, ref byte[] qHandle) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(qHandle, true);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "GetAllEmailsClose", mtdSignature);
                    qHandle = ((InterSystems.Data.CacheTypes.CacheBinaryArgument)(mtdSignature.Arguments[0])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetAllEmailsExecute
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GetAllEmailsExecute(InterSystems.Data.CacheClient.CacheConnection conn, ref byte[] qHandle, System.Nullable<double> ShopID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(qHandle, true);
                    mtdSignature.Add(ShopID, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "GetAllEmailsExecute", mtdSignature);
                    qHandle = ((InterSystems.Data.CacheTypes.CacheBinaryArgument)(mtdSignature.Arguments[0])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetAllEmailsFetch
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GetAllEmailsFetch(InterSystems.Data.CacheClient.CacheConnection conn, ref byte[] qHandle, ref InterSystems.Data.CacheTypes.CacheSysList Row, ref System.Nullable<long> AtEnd) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(qHandle, true);
                    mtdSignature.Add(Row, conn, true);
                    mtdSignature.Add(AtEnd, true);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "GetAllEmailsFetch", mtdSignature);
                    qHandle = ((InterSystems.Data.CacheTypes.CacheBinaryArgument)(mtdSignature.Arguments[0])).Value;
                    Row = ((InterSystems.Data.CacheTypes.CacheSysListArgument)(mtdSignature.Arguments[1])).Value;
                    AtEnd = ((InterSystems.Data.CacheTypes.CacheIntArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetShopAddressesClose
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GetShopAddressesClose(InterSystems.Data.CacheClient.CacheConnection conn, ref byte[] qHandle) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(qHandle, true);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "GetShopAddressesClose", mtdSignature);
                    qHandle = ((InterSystems.Data.CacheTypes.CacheBinaryArgument)(mtdSignature.Arguments[0])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetShopAddressesExecute
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GetShopAddressesExecute(InterSystems.Data.CacheClient.CacheConnection conn, ref byte[] qHandle, System.Nullable<double> ShopID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(qHandle, true);
                    mtdSignature.Add(ShopID, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "GetShopAddressesExecute", mtdSignature);
                    qHandle = ((InterSystems.Data.CacheTypes.CacheBinaryArgument)(mtdSignature.Arguments[0])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetShopAddressesFetch
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus GetShopAddressesFetch(InterSystems.Data.CacheClient.CacheConnection conn, ref byte[] qHandle, ref InterSystems.Data.CacheTypes.CacheSysList Row, ref System.Nullable<long> AtEnd) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(qHandle, true);
                    mtdSignature.Add(Row, conn, true);
                    mtdSignature.Add(AtEnd, true);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "GetShopAddressesFetch", mtdSignature);
                    qHandle = ((InterSystems.Data.CacheTypes.CacheBinaryArgument)(mtdSignature.Arguments[0])).Value;
                    Row = ((InterSystems.Data.CacheTypes.CacheSysListArgument)(mtdSignature.Arguments[1])).Value;
                    AtEnd = ((InterSystems.Data.CacheTypes.CacheIntArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static Shopping.Shop IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Shopping.Shop));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Shopping.Shop)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameDisplayToLogical
        /// </summary>
        public static string NameDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "NameDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus NameIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "NameIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameLogicalToDisplay
        /// </summary>
        public static string NameLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "NameLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Populate
        /// </summary>
        public static System.Nullable<long> Populate(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> count, System.Nullable<long> verbose, System.Nullable<long> DeferIndices, ref System.Nullable<long> objects, System.Nullable<long> tune) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(count, false);
                    mtdSignature.Add(verbose, false);
                    mtdSignature.Add(DeferIndices, false);
                    mtdSignature.Add(objects, true);
                    mtdSignature.Add(tune, false);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "Populate", mtdSignature);
                    objects = ((InterSystems.Data.CacheTypes.CacheIntArgument)(mtdSignature.Arguments[3])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PopulateSerial
        /// </summary>
        public static string PopulateSerial(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Shopping.Shop.RunClassMethodS(conn, Shopping.Shop.ServerClassName, "PopulateSerial", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Shopping.Shop_Extent}", conn);
            return cmd;
        }
        
        /// <summary>
        /// повертає всі адреси електронних пошт
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand GetAllEmails(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Shopping.Shop_GetAllEmails(?)}", conn);
            return cmd;
        }
        
        /// <summary>
        /// повертає усі адреси магазину
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand GetShopAddresses(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Shopping.Shop_GetShopAddresses(?)}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, typeof(Shopping.Shop), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, typeof(Shopping.Shop), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, typeof(Shopping.Shop))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, timeout, typeof(Shopping.Shop), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, typeof(Shopping.Shop), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, timeout, typeof(Shopping.Shop), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Shopping.Shop Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, typeof(Shopping.Shop), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, typeof(Shopping.Shop), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, typeof(Shopping.Shop), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, typeof(Shopping.Shop))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, timeout, typeof(Shopping.Shop), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, typeof(Shopping.Shop), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, concurrency, timeout, typeof(Shopping.Shop), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Shopping.Shop OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Shopping.Shop)(conn.OpenProxyObj(Shopping.Shop.ServerClassName, id, typeof(Shopping.Shop), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Shopping.Shop.ExistsIdInternal(conn, Shopping.Shop.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Shopping.Shop.DeleteIdInternal(conn, Shopping.Shop.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Shopping.Shop.KillExtentInternal(conn, Shopping.Shop.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Shopping.Shop.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Shopping.Shop.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Shopping.Shop.ServerClassName);
            if (metaInfo.Validate(Shopping.Shop.ClassCheckSum, Shopping.Shop.PropertyInfoColn, Shopping.Shop.CheckSumMethodDict, Shopping.Shop.CheckSumQueryDict, Shopping.Shop.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Shopping.Shop.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Shopping.Shop.AllPropertiesInfoColn != null)) {
                return Shopping.Shop.AllPropertiesInfoColn;
            }
            Shopping.Shop.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Shopping.Shop.PropertyInfoColn);
            return Shopping.Shop.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Shopping.Shop.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
