//------------------------------------------------------------------------------
// CacheProvider version: 2015.2.0.664
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Theatres {
    
    
    /// <summary>
    /// Projection of class Theatres.Actor
    /// </summary>
    public partial class Actor : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Theatres.Actor";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(39);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(6);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Actor() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Theatres.Actor", typeof(Actor));
            ;
            Theatres.Actor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Address", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 65168));
            Theatres.Actor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Gender", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Theatres.Actor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Actor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Photo", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tBinStream, 18187));
            Theatres.Actor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Roles", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfDT, 45590));
            Theatres.Actor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Theatre", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 34494));
            ;
            Theatres.Actor.CheckSumMethodDict.Add("NameGen", 44488);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Actor() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Actor(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Theatres.Actor.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Actor(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Theatres.Actor.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Address
        /// </summary>
        public virtual Theatres.Address Address {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Theatres.Address));
                        this.GetPropertyS("Address", mtdSignature);
                        return ((Theatres.Address)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Address", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Gender
        /// </summary>
        public virtual System.Nullable<long> Gender {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Gender", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Gender", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Name
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Photo
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheBinaryStream Photo {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheBinaryStream));
                        this.GetPropertyS("Photo", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheBinaryStream)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Photo", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Roles
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfStrings Roles {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfDT, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Roles", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfStrings)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Roles", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Theatre
        /// </summary>
        public virtual Theatres.Theatre Theatre {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Theatres.Theatre));
                        this.GetPropertyS("Theatre", mtdSignature);
                        return ((Theatres.Theatre)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Theatre", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method NameGen
        /// </summary>
        public virtual string NameGen() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    this.RunMethodS("NameGen", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, typeof(Theatres.Actor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, typeof(Theatres.Actor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, typeof(Theatres.Actor))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, timeout, typeof(Theatres.Actor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, typeof(Theatres.Actor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, timeout, typeof(Theatres.Actor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Actor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, typeof(Theatres.Actor), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, typeof(Theatres.Actor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, typeof(Theatres.Actor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, typeof(Theatres.Actor))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, timeout, typeof(Theatres.Actor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, typeof(Theatres.Actor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, concurrency, timeout, typeof(Theatres.Actor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Actor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Actor)(conn.OpenProxyObj(Theatres.Actor.ServerClassName, id, typeof(Theatres.Actor), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Actor.ExistsIdInternal(conn, Theatres.Actor.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Actor.DeleteIdInternal(conn, Theatres.Actor.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Theatres.Actor.KillExtentInternal(conn, Theatres.Actor.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Theatres.Actor.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Theatres.Actor.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Theatres.Actor.ServerClassName);
            if (metaInfo.Validate(Theatres.Actor.ClassCheckSum, Theatres.Actor.PropertyInfoColn, Theatres.Actor.CheckSumMethodDict, Theatres.Actor.CheckSumQueryDict, Theatres.Actor.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Theatres.Actor.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Theatres.Actor.AllPropertiesInfoColn != null)) {
                return Theatres.Actor.AllPropertiesInfoColn;
            }
            Theatres.Actor.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Theatres.Actor.PropertyInfoColn);
            return Theatres.Actor.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Theatres.Actor.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Theatres {
    
    
    /// <summary>
    /// Projection of class Theatres.Address
    /// </summary>
    public partial class Address : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Theatres.Address";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 51887;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(25);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Address() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Theatres.Address", typeof(Address));
            ;
            Theatres.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("AptNo", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("City", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Country", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Street", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Theatres.Address.CheckSumMethodDict.Add("PrintCard", 44488);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Address() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Address(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Theatres.Address.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Address(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Theatres.Address.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property AptNo
        /// </summary>
        public virtual string AptNo {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("AptNo", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("AptNo", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property City
        /// </summary>
        public virtual string City {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("City", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("City", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Country
        /// </summary>
        public virtual string Country {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Country", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Country", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Street
        /// </summary>
        public virtual string Street {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Street", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Street", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method PrintCard
        /// </summary>
        public virtual string PrintCard() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    this.RunMethodS("PrintCard", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Theatres.Address.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Theatres.Address.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Theatres.Address.ServerClassName);
            if (metaInfo.Validate(Theatres.Address.ClassCheckSum, Theatres.Address.PropertyInfoColn, Theatres.Address.CheckSumMethodDict, Theatres.Address.CheckSumQueryDict, Theatres.Address.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Theatres.Address.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Theatres.Address.AllPropertiesInfoColn != null)) {
                return Theatres.Address.AllPropertiesInfoColn;
            }
            Theatres.Address.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Theatres.Address.PropertyInfoColn);
            return Theatres.Address.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Theatres.Address.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Theatres {
    
    
    /// <summary>
    /// Projection of class Theatres.Original
    /// </summary>
    public partial class Original : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Theatres.Original";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(34);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Original() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Theatres.Original", typeof(Original));
            ;
            Theatres.Original.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Author", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Original.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Original.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Published", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Theatres.Original.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Synopsis", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 11990));
            ;
            ;
        }
        
        /// <summary>Internal API</summary>
        public Original() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Original(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Theatres.Original.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Original(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Theatres.Original.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Author
        /// </summary>
        public virtual string Author {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Author", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Author", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Name
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Published
        /// </summary>
        public virtual System.Nullable<long> Published {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Published", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Published", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Synopsis
        /// </summary>
        public virtual string Synopsis {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Synopsis", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Synopsis", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, typeof(Theatres.Original), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, typeof(Theatres.Original), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, typeof(Theatres.Original))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, timeout, typeof(Theatres.Original), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, typeof(Theatres.Original), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, timeout, typeof(Theatres.Original), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Original Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, typeof(Theatres.Original), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, typeof(Theatres.Original), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, typeof(Theatres.Original), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, typeof(Theatres.Original))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, timeout, typeof(Theatres.Original), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, typeof(Theatres.Original), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, concurrency, timeout, typeof(Theatres.Original), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Original OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Original)(conn.OpenProxyObj(Theatres.Original.ServerClassName, id, typeof(Theatres.Original), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Original.ExistsIdInternal(conn, Theatres.Original.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Original.DeleteIdInternal(conn, Theatres.Original.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Theatres.Original.KillExtentInternal(conn, Theatres.Original.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Theatres.Original.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Theatres.Original.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Theatres.Original.ServerClassName);
            if (metaInfo.Validate(Theatres.Original.ClassCheckSum, Theatres.Original.PropertyInfoColn, Theatres.Original.CheckSumMethodDict, Theatres.Original.CheckSumQueryDict, Theatres.Original.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Theatres.Original.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Theatres.Original.AllPropertiesInfoColn != null)) {
                return Theatres.Original.AllPropertiesInfoColn;
            }
            Theatres.Original.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Theatres.Original.PropertyInfoColn);
            return Theatres.Original.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Theatres.Original.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Theatres {
    
    
    /// <summary>
    /// Projection of class Theatres.Play
    /// </summary>
    public partial class Play : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Theatres.Play";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(34);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(5);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Play() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Theatres.Play", typeof(Play));
            ;
            Theatres.Play.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Personae", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfObj, 60422));
            Theatres.Play.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Script", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tCharStream, 50936));
            Theatres.Play.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Source", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30754));
            Theatres.Play.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Staged", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Theatres.Play.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Theatre", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 34494));
            ;
            ;
        }
        
        /// <summary>Internal API</summary>
        public Play() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Play(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Theatres.Play.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Play(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Theatres.Play.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Personae
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheArrayOfObjects<Theatres.Actor> Personae {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheArrayOfObjects<Theatres.Actor>));
                        this.GetPropertyS("Personae", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheArrayOfObjects<Theatres.Actor>)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Personae", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Script
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheCharacterStream Script {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheCharacterStream));
                        this.GetPropertyS("Script", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheCharacterStream)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Script", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Source
        /// </summary>
        public virtual Theatres.Original Source {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Theatres.Original));
                        this.GetPropertyS("Source", mtdSignature);
                        return ((Theatres.Original)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Source", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Staged
        /// </summary>
        public virtual System.Nullable<long> Staged {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Staged", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Staged", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Theatre
        /// </summary>
        public virtual Theatres.Theatre Theatre {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Theatres.Theatre));
                        this.GetPropertyS("Theatre", mtdSignature);
                        return ((Theatres.Theatre)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Theatre", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, typeof(Theatres.Play), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, typeof(Theatres.Play), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, typeof(Theatres.Play))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, timeout, typeof(Theatres.Play), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, typeof(Theatres.Play), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, timeout, typeof(Theatres.Play), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Play Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, typeof(Theatres.Play), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, typeof(Theatres.Play), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, typeof(Theatres.Play), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, typeof(Theatres.Play))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, timeout, typeof(Theatres.Play), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, typeof(Theatres.Play), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, concurrency, timeout, typeof(Theatres.Play), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Play OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Play)(conn.OpenProxyObj(Theatres.Play.ServerClassName, id, typeof(Theatres.Play), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Play.ExistsIdInternal(conn, Theatres.Play.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Play.DeleteIdInternal(conn, Theatres.Play.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Theatres.Play.KillExtentInternal(conn, Theatres.Play.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Theatres.Play.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Theatres.Play.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Theatres.Play.ServerClassName);
            if (metaInfo.Validate(Theatres.Play.ClassCheckSum, Theatres.Play.PropertyInfoColn, Theatres.Play.CheckSumMethodDict, Theatres.Play.CheckSumQueryDict, Theatres.Play.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Theatres.Play.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Theatres.Play.AllPropertiesInfoColn != null)) {
                return Theatres.Play.AllPropertiesInfoColn;
            }
            Theatres.Play.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Theatres.Play.PropertyInfoColn);
            return Theatres.Play.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Theatres.Play.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Theatres {
    
    
    /// <summary>
    /// Projection of class Theatres.PopulateUtils
    /// </summary>
    public partial class PopulateUtils : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Theatres.PopulateUtils";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 5120;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(7);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        /// <summary>
        /// Projection of method CreateData
        /// </summary>
        public static void CreateData(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "CreateData", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GenCountry
        /// </summary>
        public static string GenCountry(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "GenCountry", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GenName
        /// </summary>
        public static string GenName(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "GenName", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GenPhoto
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheBinaryStream GenPhoto(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheBinaryStream));
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "GenPhoto", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryStream)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GenPlayName
        /// </summary>
        public static string GenPlayName(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "GenPlayName", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GenRole
        /// </summary>
        public static string GenRole(InterSystems.Data.CacheClient.CacheConnection conn, string PlayName) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(PlayName, false);
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "GenRole", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GenScript
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheCharacterStream GenScript(InterSystems.Data.CacheClient.CacheConnection conn, string PlayName) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheCharacterStream));
                    mtdSignature.Add(PlayName, false);
                    Theatres.PopulateUtils.RunClassMethodS(conn, Theatres.PopulateUtils.ServerClassName, "GenScript", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheCharacterStream)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Theatres.PopulateUtils.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Theatres.PopulateUtils.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Theatres.PopulateUtils.ServerClassName);
            if (metaInfo.Validate(Theatres.PopulateUtils.ClassCheckSum, Theatres.PopulateUtils.PropertyInfoColn, Theatres.PopulateUtils.CheckSumMethodDict, Theatres.PopulateUtils.CheckSumQueryDict, Theatres.PopulateUtils.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Theatres.PopulateUtils.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Theatres.PopulateUtils.AllPropertiesInfoColn != null)) {
                return Theatres.PopulateUtils.AllPropertiesInfoColn;
            }
            Theatres.PopulateUtils.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Theatres.PopulateUtils.PropertyInfoColn);
            return Theatres.PopulateUtils.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Theatres.PopulateUtils.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Theatres {
    
    
    /// <summary>
    /// Projection of class Theatres.Theatre
    /// </summary>
    public partial class Theatre : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Theatres.Theatre";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(25);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Theatre() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Theatres.Theatre", typeof(Theatre));
            ;
            Theatres.Theatre.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Actors", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tRelationship, 39588));
            Theatres.Theatre.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Address", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 65168));
            Theatres.Theatre.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Theatres.Theatre.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Plays", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tRelationship, 41261));
            ;
            ;
        }
        
        /// <summary>Internal API</summary>
        public Theatre() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Theatre(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Theatres.Theatre.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Theatre(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Theatres.Theatre.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Actors
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheRelationshipObject Actors {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheRelationshipObject));
                        this.GetPropertyS("Actors", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheRelationshipObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Actors", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Address
        /// </summary>
        public virtual Theatres.Address Address {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Theatres.Address));
                        this.GetPropertyS("Address", mtdSignature);
                        return ((Theatres.Address)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Address", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Name
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Plays
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheRelationshipObject Plays {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheRelationshipObject));
                        this.GetPropertyS("Plays", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheRelationshipObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Plays", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, typeof(Theatres.Theatre), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, typeof(Theatres.Theatre), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, typeof(Theatres.Theatre))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, timeout, typeof(Theatres.Theatre), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, typeof(Theatres.Theatre), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, timeout, typeof(Theatres.Theatre), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Theatres.Theatre Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, typeof(Theatres.Theatre), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, typeof(Theatres.Theatre), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, typeof(Theatres.Theatre), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, typeof(Theatres.Theatre))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, timeout, typeof(Theatres.Theatre), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, typeof(Theatres.Theatre), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, concurrency, timeout, typeof(Theatres.Theatre), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Theatres.Theatre OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Theatres.Theatre)(conn.OpenProxyObj(Theatres.Theatre.ServerClassName, id, typeof(Theatres.Theatre), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Theatre.ExistsIdInternal(conn, Theatres.Theatre.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Theatres.Theatre.DeleteIdInternal(conn, Theatres.Theatre.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Theatres.Theatre.KillExtentInternal(conn, Theatres.Theatre.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Theatres.Theatre.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Theatres.Theatre.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Theatres.Theatre.ServerClassName);
            if (metaInfo.Validate(Theatres.Theatre.ClassCheckSum, Theatres.Theatre.PropertyInfoColn, Theatres.Theatre.CheckSumMethodDict, Theatres.Theatre.CheckSumQueryDict, Theatres.Theatre.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Theatres.Theatre.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Theatres.Theatre.AllPropertiesInfoColn != null)) {
                return Theatres.Theatre.AllPropertiesInfoColn;
            }
            Theatres.Theatre.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Theatres.Theatre.PropertyInfoColn);
            return Theatres.Theatre.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Theatres.Theatre.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
